<?php
/**
 * @file
 * Code for the Classy Sessions feature.
 */

include_once 'classy_sessions.features.inc';

/**
 * Integration with Classy_CiviCRM
 */
 
 
/**
 * Implementation of hook_menu()
 */
 
function classy_sessions_menu() {
  $items['admin/classy/tutoring'] = array(
    'title' => 'Tutoring',
    'page callback' => 'classy_sessions_admin',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  
  $items['user/%user/sessions'] = array(
    'title' => t('My Sessions'),
    'page arguments' => array(1),
    'page callback' => 'classy_sessions_user_sessions',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}


/**
 * Implementation of hook_block_info()
 */

function classy_sessions_block_info() {
  $blocks = array();
  $blocks['sessions'] = array(
    'info' => t('Session Credits'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}


/**
 * Implementation of hook_block_view();
 */
 
function classy_sessions_block_view($delta) {
  if ($delta == 'sessions') {
    $block_vars = array();
    
    global $base_url;
  
    //get the session civicrm type
    $types = variable_get('classy_civicrm_type');
    $session_type_id = $types['session'];
    
    //get the list of users with available session credits
    // probably going to need to make a template to have this look pretty - basic table?
    
    //get available credits all users
    $query = db_select('classy_civicrm_credits', 'c');
    $query
      ->fields('c', array('drupal_uid', 'civi_contact_id'))
      ->condition('civi_contribution_type_id', $session_type_id, '=')
      ->condition('paid', 1, '=')
      ->condition('used', 0, '=')
      ->groupBy('drupal_uid');
    $query->addExpression('COUNT(drupal_uid)');  
    $result = $query->execute()->fetchAll();
    foreach ($result as $student) {
      //get the user name and link @todo, eventually, this should probably come from civi
      $user = user_load($student->drupal_uid);
      $block_vars[] = array('id'=>$user->uid, 'name'=>$user->name, 'available'=>$student->expression);
    }
    
    //v2 WIP
    /*$header = array('data'=>'Session Credits',
                    'field'=>'
    
    $rows = array();
    foreach ($result as $student) {
      $rows = array($user->uid, $user->name, $student->expression);
    }*/
    
    
    $content = theme('classy_session_credits', array('args'=>$block_vars));
    $block = array(
      'subject' => 'Unscheduled Session Vouchers',
      'content' => $content,
    );
    return $block;
  }
}

/**
 * Implementation of hook_theme()
 */

function classy_sessions_theme() {
  return array(
    'classy_session_credits' => array(
      'variables' => array($args = NULL),
      'template' => 'classy-sessions-credits',
    ),
  ); 
}


function classy_sessions_admin() {
  //add the block 
  
  $block = block_load('classy_sessions', 'sessions');
  $output = drupal_render(_block_get_renderable_array(_block_render_blocks(array($block))));
 
  return $output;
}

function classy_sessions_user_sessions() {
  $view = views_embed_view('sessions', 'user');
  return $view; 
}



function _classy_sessions_initialize_api() {
  $civi_drupal_path = drupal_get_path('module','civicrm');
  $civi_api_path = strstr($civi_drupal_path, 'drupal', true); 
  $civi_api_path .= '/api/api.php';  //@todo add custom directory look, also local
  civicrm_initialize();
  require_once $civi_api_path;
} 


/** 
 * Implementation of hook_form_alter
 */
function classy_sessions_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#form_id'] == 'classy_civicrm_config') {
    $types = variable_get('classy_civicrm_type', array());
    $form['classy_civicrm_type']['session'] = array(
      '#type' => 'textfield',
      '#title' => t('Tutoring Type'),
      '#default_value' => $types['session'],
      '#size' => 2,
      '#maxlength' => 2,
      '#description' => t("The CiviCRM Contribution Type ID for tutoring sessions."),
      '#required' => TRUE,
    );
  }
}

/**
 * Implementation of hook_node_presave()
 */

function classy_sessions_node_presave($node){
  
  if ($node->type == 'session') {
    //uid comes from the student ref field
    $uid = $node->field_student[$node->language][0]['target_id'];
    
    //get the session civicrm type
    $types = variable_get('classy_civicrm_type');
    $session_type_id = $types['session'];
   
    if ($node->is_new != TRUE) {
      //get the change in state
      $state = taxonomy_term_load($node->field_session_status[$node->language][0]['target_id']);
      if (isset($node->original->field_session_status[$node->language][0])) {
        $old_state = taxonomy_term_load($node->original->field_session_status[$node->language][0]['target_id']);
      }
      //get number of credits to modify
      $num_credits = $node->field_number_of_credits[$node->language][0]['value'];
      
      //session is being scheduled ( probably need to add a 'number scheduled' to the display block' )
      $mod = intval($num_credits) * 30;     
      //set end time for calendar display
      $shift = strtotime($node->field_date[$node->language][0]['value2']);
      $time = strtotime("+". $mod . " minutes", $shift);
      $new_time = date("Y-m-d\TH:i:s", $time);
       
      $node->field_date[$node->language][0]['value2'] = $new_time; 
      
      //session has been marked as used 
      if ($state->name == "Used" && $old_state->name != "Used") {

        //get available credits for the user
        $query = db_select('classy_civicrm_credits', 'c');
        $query
          ->fields('c')
          ->condition('drupal_uid', $uid,'=')
          ->condition('civi_contribution_type_id', $session_type_id, '=')
          ->condition('paid', 1, '=')
          ->condition('used', 0, '=')
          ->range(0, $num_credits);
        $result = $query->execute()->fetchAll();
       // dpm($result);
        
        foreach ($result as $credit) {
          $table = 'classy_civicrm_credits';
          $record = array(
            'id' => $credit->id,
            'drupal_id' => $uid,
            'used' => 1,
          );  
          drupal_write_record($table, $record, 'id');
        }
      
      } elseif ($state->name != "Used" && (!empty($old_state) && $old_state->name == "Used")) { //credit refunded
        //mark a credit as unused
        //release credits for the user
        $query = db_select('classy_civicrm_credits', 'c');
        $query
          ->fields('c')
          ->condition('drupal_uid', $uid,'=')
          ->condition('civi_contribution_type_id', $session_type_id, '=')
          ->condition('paid', 1, '=')
          ->condition('used', 1, '=')
          ->range(0, $num_credits);
        $result = $query->execute()->fetchAll();
        foreach ($result as $credit) {
          $table = 'classy_civicrm_credits';
          $record = array(
            'id' => $credit->id,
            'drupal_id' => $uid,
            'used' => 0,
          );  
          drupal_write_record($table, $record, 'id');
        }
        
      }
    }
    classy_civicrm_credit_check_display(TRUE);
  }
  
}


//probably want to move this to not a lineitem bit but only purchase creation


/**
 * Implementation of hook_civicrm_post()
 *
 * Creates an unscheduled session node for each session credit paid for
 * classy_civicrm creates a credit record for each qty purchased - sessions will always have a line item entry
 */

function classy_sessions_civicrm_post( $op, $objectName, $objectId, &$objectRef ) {
  global $user;

  //get the session civicrm type
  $types = variable_get('classy_civicrm_type');
  $session_type_id = $types['session'];
  
  //check that this is a session type
  
  if ($objectName == 'LineItem'){
    if ($op == 'create') {
      //check to make sure this is a session type
      _classy_sessions_initialize_api();
      $contributions = civicrm_api('contribution', 'get', array('version'=>3, 'id'=>$objectRef['entity_id']));
      foreach ($contributions['values'] as $contribution) {
        $type = $contribution['contribution_type_id'];
        
      }
      if ($type == $session_type_id){
        //create an initial session, just so the admins know they need to schedule one

        $node = new stdClass();
        $node->title = "Unscheduled Session for " . $user->name;
        $node->type = "session";
        $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
        $node->uid = $user->uid; 
        $node->status = 0; //(1 or 0): published or not
        $node->promote = 0; //(1 or 0): promoted to front page
        $node->comment = 1; //2 = comments on, 1 = comments off
        
        // Entity reference field
        $node->field_student[$node->language][]['target_id'] = $user->uid;
        $node->field_student[$node->language][]['target_type'] = 'user'; 

        $node = node_submit($node); // Prepare node for saving
        node_save($node);
        drupal_set_message( "Session with id " . $node->nid . " created!\n");

      }
    }  
  
  }

}
