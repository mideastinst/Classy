<?php

/**
 * @file
 * This is an example outlining how a module can be used to define a new
 * node type.  In Drupal 7 we move most of what was once needed in this file
 * to the classy.install file so that it can be managed efficiently.
 *
 * Our example node type will allow users to specify multiple "colors",
 * a "quantity" and an "image" for their nodes; some kind of rudimentary
 * inventory-tracking system, perhaps?
 *
 * In previous versions of Drupal, "teaser" and "page" were node view modes.  In
 * Drupal 7 we can define custom view modes to let the node know how it should
 * return it's data.  This module declares a custom view mode called
 * "example_node_list".
 *
 * We no longer need an extra database table to store this content type's
 * information.
 *
 * Most node types that provide fields do not require any custom code for
 * the fields, as the fields system provides storage and access.
 *
 * See @link http://drupal.org/node/707832 Field API Tutorial @endlink
 *
 * See @link http://drupal.org/node/443536 Field API Handbook Page @endlink
 *
 * See @link field Field API documentation @endlink
 *
 * See @link field_example.install field_example.install @endlink
 *
 * Remember that most node types do not require any custom code, as one
 * simply creates them using the fields UI.
 */


/**
 * Implements hook_menu().
 *
 * We are providing a default page to illustrate the use of our custom node view
 * mode that will live at http://example.com/?q=examples/classy
 */
function classy_menu() {
  $items['examples/classy'] = array(
    'page callback' => 'classy_page',
    'access arguments' => array('access content'),
    'title' => 'Classy',
  );
  return $items;
}

/**
 * Custom callback that builds our content and returns it to the browser.
 *
 * @return
 *   a build array
 *
 */
function classy_page() {
  $build = array();
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type AND n.status = :status';
  $result = db_query($sql,
    array(
      ':type' => 'classy',
      ':status' => 1,
    )
  );

  // Loop through each of our classy nodes and instruct node_view
  // to use our custom "example_node_list" view.
  // http://api.drupal.org/api/function/node_load/7
  // http://api.drupal.org/api/function/node_view/7
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $build['node_list'][]= node_view($node, 'classy_list');
  }

  return $build;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We need to modify the default node entity info by adding a new view mode to
 * be used in functions like node_view() or node_build_content().
 *
 */
function classy_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['classy_list'] = array(
    'label' => t('Classy Node List'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_field_formatter_info().
 */
function classy_field_formatter_info() {
  return array(
    'classy_courses' => array(
      'label' => t('Classy Course Handle'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @todo: We need to provide a formatter for the colors that a user is allowed to enter
 * during node creation.
 */
/*function classy_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'classy_colors':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $color = $item['safe_value'];
        $element[$delta]['#markup'] = theme('classy_color', array('color' => $color));
      }
      break;
  }

  return $element;
}*/


function classy_views_api() {
    return array(
        'api' => '3.0-alpha1',
        'path' => drupal_get_path('module','classy'). '/views',
    );
}


/**
 * Implements hook_theme_registry_alter()
 * Want to provide theming tpls here, rather than just the theme
 */
function classy_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'classy');
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _classy_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function _classy_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * Implementation of hook_preprocess_node();
 * 
 * All the additional custom node variables are assembled here.
 */
function classy_preprocess_node(&$vars) {
  //Add view mode theme suggestions
  $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__' . $vars['view_mode'];

  //menu seems to be messed up and not adding active trail via context
  //dpm(context_get());
  //dpm(menu_get_active_trail());
  
  //global $language;
  global $base_url;
  if (isset($vars['type'])) {
    switch ($vars['type']) {
	    case 'profile':
	      unset($vars['content']['links']);
	      unset($vars['content']['comments']);
	      break;
      case 'course':
        break;      
      case 'class':
        //dpm($vars);
        
        //Load related course information
        
        //check to see if the user has is logged in
        if ($vars['logged_in'] == TRUE) {
          $credits = FALSE;
          //check to see if user has available class credits to spend - this is civi integration for payment
          if ($credits == TRUE) {
            $vars['registration'] = "go for it dude";
          } else {
            $vars['registration'] = "You have no available credits <button class='submit'>" . l(t('Add Credits'), $base_url . '/user', array ('alt'=>'Add') ) . "</button>";
          }
        
        } else {
          $vars['registration'] = "<button class='submit'>" . l(t('Log In to Register'), $base_url . '/user', array ('alt'=>'Register') ) . "</button>";
          
        }
        break;
      
   
	    case 'site_page':
	      unset($vars['content']['links']);
	      unset($vars['content']['comments']);
        break;
      default:
	      break;
    }
  }
}


/**
 * Create the class list
 */
 
 // uses drupal_write_record($table, &$record, $primary_keys = array())
 
 /*    // Initializing $record array with values.
    $record = array (
    "uid" => $user->uid,
    "ufname" => $form_state ["values"]["name"],
    "ufdesc" => $form_state ["values"]["desc"],
    "ufpath" => $path,
    "ufstatus" => 1,
    "ufdate" => $time,
    );
    // Inserting $record (data) into the database. Here $table variable contains the name of the table.
    drupal_write_record ($table, $record);
    // Getting the last inserted ID. (ufid) is the primary key of the table in my scenario.
    $return = $record ['ufid'];
    
  */  



