<?php


/**
 * Implements hook_theme_registry_alter()
 * Want to provide theming tpls here, rather than just in the theme
 */
function classy_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'classy');
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    _classy_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
 */
function _classy_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

function classy_views_api() {
    return array(
        'api' => '3.0-alpha1',
        'path' => drupal_get_path('module','classy'). '/views',
    );
}



/**
 * Implements hook_menu().
 */
function classy_menu() {
  $items['examples/classy'] = array(
    'page callback' => 'classy_page',
    'access arguments' => array('access content'),
    'title' => 'Classy',
  );

  $items['admin/classy'] = array(
    'title' => 'ClassySIS',
    'description' => 'Administer the Class Registration System.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
    'weight' => -7,
  );

  /*$items['admin/classy/students'] = array(  // view
    'title' => 'Students',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('classy_student_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/classy_ui.admin.inc',
    'weight' => -20,
  );*/
  $items['admin/classy/instructors'] = array(  // view
    'title' => 'Instructors',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'classy_admin_instructors',
    'access arguments' => array('access administration pages'),
    'weight' => -10,
  );  
  $items['admin/classy/config'] = array(
    'title' => 'Classy Configuration',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  
  return $items;
}

/**
 * Custom callback that builds our content and returns it to the browser. @todo replace with view
 *
 * @return
 *   a build array
 *
 */
function classy_page() {
  $build = array();
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type AND n.status = :status';
  $result = db_query($sql,
    array(
      ':type' => 'class',
      ':status' => 1,
    )
  );

  // Loop through each of our classy nodes and instruct node_view
  // to use our custom "example_node_list" view.
  // http://api.drupal.org/api/function/node_load/7
  // http://api.drupal.org/api/function/node_view/7
  foreach ($result as $row) {
    $node = node_load($row->nid);
    $build['node_list'][]= node_view($node, 'classy_list');
  }

  return $build;
}

function classy_admin_instructors() {
  return 'This will be the instructors area';
}

/**
 * Implements hook_entity_info_alter().
 *
 * We need to modify the default node entity info by adding a new view mode to
 * be used in functions like node_view() or node_build_content().
 *
 */
function classy_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['classy_list'] = array(
    'label' => t('Classy Node List'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_field_formatter_info().
 */
function classy_field_formatter_info() {
  return array(
    'classy_courses' => array(
      'label' => t('Classy Course Handle'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @todo: We need to provide a formatter for the colors that a user is allowed to enter
 * during node creation.
 */
/*function classy_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'classy_colors':
      foreach ($items as $delta => $item) {
        $element[$delta]['#type'] = 'markup';
        $color = $item['safe_value'];
        $element[$delta]['#markup'] = theme('classy_color', array('color' => $color));
      }
      break;
  }

  return $element;
}*/


/**
 * Creates a hook to specify validation permissions
 *
 * Validation criteria have 3 levels - annonymous, authenticated (can't sign up) and authorized - array
 *
 */
function classy_approval_criteria($type, $nid, $uid) {

  global $user;
  $criteria = array();
  
  //user must be logged in
  if ($user->uid) {
    $criteria[] = array('type'=>'logged_in', 'pass'=>TRUE);  
  } else {
    $criteria[] = array('type'=>'logged_in', 'pass'=>FALSE, 'target'=>'/user', 'text' => 'Please Log In',);
  }
  //get all criteria from other modules
  $external_criteria = module_invoke_all('approval_criterion', $type, $nid, $uid);
  $criteria[] = $external_criteria;
  return $criteria;
}


/**
 * Implementation of hook_preprocess_node();
 * 
 * All the additional custom node variables are assembled here.
 */
function classy_preprocess_node(&$vars) {

  //Add view mode theme suggestions
  $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__' . $vars['view_mode'];

  global $user;
  global $base_url;
  //global $language;
  if (isset($vars['type'])) {
    switch ($vars['type']) {
      case 'course':
        break;      
      case 'class':

        $query = db_select('classy_enrollment', 'e'); //currently getting all classes
        $query
          ->fields('e', array('class_id'))
          ->condition('state', 1, '=')
          ->groupBy('class_id');
        $result = $query->execute()->fetchAll();
        
        //dpm($result);
        /*foreach ($result as $class) { //update class node to reflect enrollment
          $table = 'field_data_classy_enrolled';
          
          $record = array(
            'id' => $class['entity_id'],
            //'classy_enrolled_value' => ,
          );  
          //drupal_write_record($table, $record, 'id');
        }   */  
        
        //Load related course information
        
        //check to see if already enrolled - if so give 'unenroll' form
        $query = db_select('classy_enrollment', 'e');
        $query
          ->fields('e')
          ->condition('student_id', $vars['uid'],'=')
          ->condition('class_id', $vars['nid'], '=')
          ->condition('state', 1, '=');  //1 for current, 2 for withdrawn, 3 for completed
        $result = $query->execute()->fetchAll();
        $enrolled = count($result);
        if ($enrolled > 0 ) {
          variable_set('approval', TRUE);
          $vars['registration'] = classy_enrollment($user->uid, $vars['nid']);
        } else {
          //send course info to approval criteria?  - is the user already signed up?
          $criteria = classy_approval_criteria($vars['type'], $vars['nid'], $user->uid);
          
          foreach ($criteria as $criterion) {
            //$criterion['pass'] = TRUE; //debug
            if ($criterion['pass'] == FALSE) {
              //$vars['registration']['text'] = $criterion['text'];
              //$vars['registration']['target'] = $base_url . $criterion['target'];
              $vars['registration'] = array(
                'register' => array(
                  '#markup' => l(t($criterion['text']), $base_url . $criterion['target'], array ('alt'=>'Register') ),
                  '#prefix' => '<div class="submit">',
                  '#suffix' => '</div>',
                ),
              );
              break;
            } else {
              variable_set('approval', TRUE);
              $vars['registration'] = classy_enrollment($user->uid, $vars['nid']);
            }
          }
        } 
         
        break;
      default:
	      break;
    }
  }
}

function classy_enrollment($uid, $nid) {   
  //check to see if already enrolled - if so give 'unenroll' form
  $query = db_select('classy_enrollment', 'e');
  $query
    ->fields('e')
    ->condition('student_id', $uid,'=')
    ->condition('class_id', $nid, '=')
    ->condition('state', 1, '=');  //1 for current, 2 for withdrawn, 3 for completed
  $result = $query->execute()->fetchAll();
  $enrolled = count($result);
  $allowed = ($enrolled == 0 ? TRUE : FALSE);
  
  //pick the right form to display, if the user is currently enrolled for that class
  if ($allowed == TRUE) {
    module_load_include('inc', 'classy', 'includes/classy.enroll');
    $load_form = 'classy_enroll';
  } else {
    module_load_include('inc', 'classy', 'includes/classy.withdraw');
    $load_form = 'classy_withdraw';
  }
 
  return drupal_get_form($load_form, $nid);
}

/** 
 * Implementation of hook_form_alter
 */
function classy_form_alter(&$form, &$form_state, $form_id) {

  $enroll_forms = array('classy_enroll', 'classy_withdraw');
  if (in_array($form_id, $enroll_forms)){
    $form['#submit'][] = 'classy_enrollment_enroll';
  }  
  //dpm($form);
  //add signup role - add 'enrolled' role once signed up
}

function classy_enrollment_enroll($form, &$form_state) {   //@pickup - withdraw isn't getting the right nid
  //make sure not already enrolled or withdrawn
  global $user;
  $uid = $user->uid;

  //check for old record
  $query = db_select('classy_enrollment', 'e');
  $query
    ->fields('e')
    ->condition('student_id', $uid,'=')
    ->condition('class_id', $form['nid']['#value'],'=');
  $result = $query->execute()->fetchAssoc();

  if ($form['#form_id'] == 'classy_withdraw') {
    $table = 'classy_enrollment';
    $enroll_id = $result['id'];
    $record = array(
      'id' => $enroll_id,
      'state' => 2,
    );  
    drupal_write_record($table, $record, 'id');
    
    $query = db_delete('classy_grades');
    $query
      ->condition('student_id', $uid,'=')
      ->condition('class_id', $form['nid']['#value'],'=');
    $result = $query->execute();
    
    drupal_set_message(t('You are no longer enrolled.'));
    
  } elseif ($form['#form_id'] == 'classy_enroll'  && $result) {  //re-enrolling
    
    $table = 'classy_enrollment';
    $enroll_id = $result['id'];
    $record = array(
      'id' => $enroll_id,
      'state' => 1,
    );  
    drupal_write_record($table, $record, 'id');
    
    //add record to grades table  
    $table = 'classy_grades';
    $record = array(
      'student_id' => $uid,
      'class_id' => $form['nid']['#value'],
    );
    drupal_write_record($table, $record);
    
    drupal_set_message(t('You are now enrolled again.'));
  } else {  
    //add record to grades table  
    $table = 'classy_grades';
    $record = array(
      'student_id' => $uid,
      'class_id' => $form['nid']['#value'],
    );
    drupal_write_record($table, $record);
    
    //add record to classes table
    $table = 'classy_enrollment';
    $record = array(
      'student_id' => $uid,
      'class_id' => $form['nid']['#value'],
      'state' => 1,
    );
    drupal_write_record($table, $record);
    drupal_set_message(t('You are now enrolled.'));
  } 
}





function classy_enrollment_validate($form, &$form_state) {
  if ($form_state['values']['enroll']['user'] == '') {
    form_set_error('', t('You must have a user name.'));
  }
}



/**
 * Implementation of hook_cron
 *
 * Updates counts for enrolled students when cron runs.
 */
/*function classy_cron() {
  //count enrollment for each current class
  
  $query = db_select('classy_enrollment', 'e'); //currently getting all classes
  $query
    ->fields('e', array('class_id'))
  $result = $query->execute()->fetchAssoc();
  foreach ($result as $class) { //update class node to reflect enrollment
    $table = 'field_data_classy_enrolled';
    
    $record = array(
      'id' => $class['entity_id'],
      'classy_enrolled_value' => ,
    );  
    //drupal_write_record($table, $record, 'id');
    
    
  }
}  */
  



